#include <stdio.h>
#include <ctype.h>

#define SIZE 100

char stack[SIZE];
int top = -1;

void push(char ch) {
    stack[++top] = ch;
}

char pop() {
    return stack[top--];
}

char peek() {
    return stack[top];
}

int precedence(char op) {
    switch (op) {
        case '^': return 3;
        case '*':
        case '/': return 2;
        case '+':
        case '-': return 1;
        default: return 0;
    }
}

int isRightAssociative(char op) {
    return op == '^';
}

int isOperator(char ch) {
    return ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^';
}

void infixToPostfix(char* expr) {
    for (int i = 0; expr[i] != '\0'; i++) {
        char ch = expr[i];

        if (isalpha(ch)) {
            printf("%c", ch);
        } else if (ch == '(') {
            push(ch);
        } else if (ch == ')') {
            while (top != -1 && peek() != '(')
                printf("%c", pop());
            pop();  // Discard '('
        } else if (isOperator(ch)) {
            while (top != -1 && peek() != '(' &&
                  (precedence(peek()) > precedence(ch) ||
                   (precedence(peek()) == precedence(ch) && !isRightAssociative(ch))))
                printf("%c", pop());
            push(ch);
        }
    }

    while (top != -1)
        printf("%c", pop());
}

int main() {
    char expr[] = "((A+B)*C-(D-E))^(F+G)";
    printf("Infix:   %s\n", expr);
    printf("Postfix: ");
    infixToPostfix(expr);
    printf("\n");
    return 0;
}



OUTPUT:
Infix:   ((A+B)*C-(D-E))^(F+G)
Postfix: AB+C*DE--FG+^
